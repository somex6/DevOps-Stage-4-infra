name: Terraform + Ansible Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.7
  ANSIBLE_VERSION: 7.4.0

jobs:
  # terraform:
  #   name: Terraform Plan/Apply
  #   runs-on: ubuntu-latest
  #   environment: production
  #   defaults:
  #     run:
  #       working-directory: ./terraform

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v2
  #     with:
  #       terraform_version: ${{ env.TF_VERSION }}

  #   - name: Terraform Init
  #     run: terraform init --backend-config=backend.conf -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

  #   - name: Terraform Validate
  #     run: terraform validate

  #   - name: Terraform Plan
  #     id: plan
  #     run: terraform plan -out=tfplan
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #   - name: Terraform Apply
  #     if: github.ref == 'refs/heads/main'
  #     run: terraform apply -auto-approve tfplan
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ansible:
    name: Ansible Deployment
    # needs: terraform
    runs-on: ubuntu-latest
    # environment: production
    defaults:
      run:
        working-directory: ./ansible

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Ansible and dependencies
      run: |
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        pip install boto3
        ansible-galaxy install -r requirements.yml
        ansible-galaxy collection install -r requirements.yml

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set AWS environment variables
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
        aws sts get-caller-identity

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Run Ansible Playbook with Dynamic Inventory
      run: |
        ansible-galaxy collection install community.docker
        ansible-playbook -i inventory/aws_ec2.yml deploy.yml
      env:
        ANSIBLE_CONFIG: ${{ github.workspace }}/ansible/ansible.cfg
        ANSIBLE_HOST_KEY_CHECKING: False